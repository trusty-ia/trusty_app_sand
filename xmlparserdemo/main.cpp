/*******************************************************************************
 * Copyright (c) 2017 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "tinyxml2.h"

using namespace tinyxml2;

#define LOCAL_TRACE  1

#if LOCAL_TRACE
#define TLOGI(fmt, ...) \
    fprintf(stderr, "%s: %d: " fmt, LOG_TAG, __LINE__,  ## __VA_ARGS__)
#else
#define TLOGI(fmt, ...)
#endif
#define LOG_TAG      "xmlparserdemo"

XMLElement *tinyxml2_WalkNextElement(XMLElement *root, XMLElement *element)
{
    XMLElement *next_element;
    XMLNode *next_node;

    if ((root == NULL) || (element == NULL))
        return NULL;

    next_element = element->FirstChildElement();
    if (next_element)
        return next_element;

    next_element = element->NextSiblingElement();
    if (next_element)
        return next_element;

    next_node = dynamic_cast<XMLNode*>(element)->Parent();
    while (1) {
        if ((next_node == NULL) || (next_node->ToElement() == root))
            return NULL;

        next_element = next_node->ToElement()->NextSiblingElement();
        if (next_element)
            return next_element;
        next_node = next_node->Parent();
    }
}

XMLElement *tinyxml2_FindElement(XMLElement *root, XMLElement *element, const char *name, const char *attr, const char *value)
{
    XMLElement *get_element;

    if ((root == NULL) || (name == NULL))
        return NULL;

    if (root && (element == NULL)) {
        if (strcmp(root->Name(), name) == 0) {
            if (attr && value) {
                if (root->Attribute(attr, value))
                    return root;
            }
            else
                return root;
        }

        for (element = root->FirstChildElement(); element; element = element->NextSiblingElement()) {
            get_element = tinyxml2_FindElement(element, NULL, name, attr, value);
            if (get_element)
                return get_element;
        }

        return NULL;
    }

    if (root && element) {
        while (1) {
            element = tinyxml2_WalkNextElement(root, element);
            if (element == NULL)
                return NULL;
            if (strcmp(element->Name(), name) == 0) {
                if (attr && value) {
                    if (element->Attribute(attr, value))
                        return element;
                }
                else
                    return element;
            }
        }
    }
}

/* The xmldata string contains below content:
 * <?xml version="1.0"?>
 *
 * <bookstore>
 *     <book category="CHILDREN">
 *         <title>Harry Potter</title>
 *         <author>J K. Rowling</author>
 *         <year>2005</year>
 *         <price>29.99</price>
 *     </book>
 *     <book category="WEB">
 *         <title>Learning XML</title>
 *         <author>Erik T. Ray</author>
 *         <year>2003</year>
 *         <price>39.95</price>
 *     </book>
 * </bookstore>
 */
static char xmldata[] = { \
    0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, \
    0x2E, 0x30, 0x22, 0x3F, 0x3E, 0x0A, 0x0A, 0x3C, 0x62, 0x6F, 0x6F, 0x6B, 0x73, 0x74, 0x6F, 0x72, \
    0x65, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x62, 0x6F, 0x6F, 0x6B, 0x20, 0x63, 0x61, 0x74, \
    0x65, 0x67, 0x6F, 0x72, 0x79, 0x3D, 0x22, 0x43, 0x48, 0x49, 0x4C, 0x44, 0x52, 0x45, 0x4E, 0x22, \
    0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x74, 0x69, 0x74, 0x6C, 0x65, \
    0x3E, 0x48, 0x61, 0x72, 0x72, 0x79, 0x20, 0x50, 0x6F, 0x74, 0x74, 0x65, 0x72, 0x3C, 0x2F, 0x74, \
    0x69, 0x74, 0x6C, 0x65, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x61, \
    0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x4A, 0x20, 0x4B, 0x2E, 0x20, 0x52, 0x6F, 0x77, 0x6C, 0x69, \
    0x6E, 0x67, 0x3C, 0x2F, 0x61, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, \
    0x20, 0x20, 0x20, 0x20, 0x3C, 0x79, 0x65, 0x61, 0x72, 0x3E, 0x32, 0x30, 0x30, 0x35, 0x3C, 0x2F, \
    0x79, 0x65, 0x61, 0x72, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x70, \
    0x72, 0x69, 0x63, 0x65, 0x3E, 0x32, 0x39, 0x2E, 0x39, 0x39, 0x3C, 0x2F, 0x70, 0x72, 0x69, 0x63, \
    0x65, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x2F, 0x62, 0x6F, 0x6F, 0x6B, 0x3E, 0x0A, 0x20, \
    0x20, 0x20, 0x20, 0x3C, 0x62, 0x6F, 0x6F, 0x6B, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, \
    0x79, 0x3D, 0x22, 0x57, 0x45, 0x42, 0x22, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, \
    0x20, 0x3C, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x4C, 0x65, 0x61, 0x72, 0x6E, 0x69, 0x6E, 0x67, \
    0x20, 0x58, 0x4D, 0x4C, 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x0A, 0x20, 0x20, 0x20, \
    0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x61, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x45, 0x72, 0x69, \
    0x6B, 0x20, 0x54, 0x2E, 0x20, 0x52, 0x61, 0x79, 0x3C, 0x2F, 0x61, 0x75, 0x74, 0x68, 0x6F, 0x72, \
    0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x79, 0x65, 0x61, 0x72, 0x3E, \
    0x32, 0x30, 0x30, 0x33, 0x3C, 0x2F, 0x79, 0x65, 0x61, 0x72, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, \
    0x20, 0x20, 0x20, 0x20, 0x3C, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3E, 0x33, 0x39, 0x2E, 0x39, 0x35, \
    0x3C, 0x2F, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x2F, 0x62, \
    0x6F, 0x6F, 0x6B, 0x3E, 0x0A, 0x3C, 0x2F, 0x62, 0x6F, 0x6F, 0x6B, 0x73, 0x74, 0x6F, 0x72, 0x65, \
    0x3E, 0x0A, 0x00 };

int main(void)
{
    class XMLDocument doc;
    XMLElement *root, *element;

    doc.LoadXmlData(xmldata);
    root = doc.RootElement();
    if (root == NULL) {
        TLOGI("No root element!");
        return 0;
    }

    for (element = tinyxml2_FindElement(root, NULL, "book", NULL, NULL); element; element = tinyxml2_FindElement(root, element, "book", NULL, NULL))
        TLOGI("category: %s\n", element->Attribute("category"));

    for (element = tinyxml2_FindElement(root, NULL, "title", NULL, NULL); element; element = tinyxml2_FindElement(root, element, "title", NULL, NULL))
        TLOGI("title: %s\n", element->GetText());

    return 0;
}

